import numpy as np
import pandas as pd
import streamlit as st
import matplotlib.pyplot as plt
import seaborn as sns
import re
import joblib
from io import StringIO

from build_project_info_function import show_project_info
from analysis_function import phan_tich_san_pham, hien_thi_ket_qua
from new_prediction_function import process_comments

# Custom CSS for Hasaki-themed design
st.set_page_config(
    page_title="Hasaki Sentiment Analysis", 
    page_icon="üíñ", 
    layout="wide",
    initial_sidebar_state="expanded"
)

# Custom CSS for enhanced design
st.markdown("""
    <style>
    /* Overall page background */
    body {
        background-color: #f0f4f0;
        color: #2f6e51;
    }

    /* Sidebar styling */
    [data-testid="stSidebar"] {
        background-color: #e6f2e8;
        border-right: 2px solid #2f6e51;
    }

    /* Header and title styles */
    .header-title {
        color: #2f6e51;
        font-family: 'Arial', sans-serif;
        text-align: center;
        padding: 20px;
        background-color: #d0e5d3;
        border-radius: 10px;
        margin-bottom: 20px;
    }

    /* Card-like containers */
    .stContainer {
        background-color: white;
        border-radius: 15px;
        box-shadow: 0 4px 6px rgba(47, 110, 81, 0.1);
        padding: 20px;
        margin-bottom: 20px;
        border: 1px solid #2f6e51;
            
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
    }

    /* Button styling */
    .stButton > button {
        background-color: #2f6e51;
        color: white;
        border: none;
        border-radius: 20px;
        padding: 10px 20px;
        transition: all 0.3s ease;
    }

    .stButton > button:hover {
        background-color: #45a049;
        transform: scale(1.05);
    }

    /* Dataframe styling */
    .dataframe {
        border: 1px solid #2f6e51;
        border-radius: 10px;
        overflow: hidden;
    }

    /* Sidebar menu styling */
    [data-testid="stSidebar"] .stRadio > div {
        background-color: #d0e5d3;
        padding: 10px;
        border-radius: 10px;
    }

    /* Text and markdown styling */
    .stMarkdown {
        color: #2f6e51;
    }
    
    /* Center images and charts */
    .stImage, .stPlotlyChart, .stPyplot {
        display: flex;
        justify-content: center;
        align-items: center;
    }
    
    /* Limit height of images */
    .stImage img {
        max-height: 400px;
        width: auto;
        object-fit: contain;
    }
    
    /* Limit height of matplotlib charts */
    .stPyplot > div {
        max-height: 400px;
        display: flex;
        justify-content: center;
        align-items: center;
    }
    .stPyplot img {
        max-height: 400px;
        width: auto;
        object-fit: contain;
    }
            
    </style>
""", unsafe_allow_html=True)


def main():
    # 1. Read data
    final_data = pd.read_csv("data/final_data.csv", encoding='utf-8')

    # 2. Load models 
    # ƒê·ªçc model
    model_filename = 'model/sentiment_rf_model.pkl'
    with open(model_filename, 'rb') as file:  
        sentiment_model = joblib.load(file)

    sentiment_map = {0: 'Negative', 1: 'Neutral', 2: 'Positive'}


    # T·∫°o c√°c n√∫t t·∫£i cho CSV v√† TXT
    def to_csv(df):
        return df.to_csv(index=False)

    
    #--------------
    # GUI
    # Logo and Title with Hasaki theme
    st.markdown(f'''
    <div class="header-title">
        <h1 style="color: #2f6e51; margin-bottom: 10px;">üåø Hasaki Sentiment Analysis</h1>
        <p style="color: #45a049; font-size: 0.9em;">Th·∫•u hi·ªÉu c·∫£m x√∫c c·ªßa kh√°ch h√†ng</p>
    </div>
    ''', unsafe_allow_html=True)
    
    # Sidebar customization
    # st.sidebar.markdown(''' 
    #     <div style="text-align: center; margin-bottom: 20px;">
    #         <img src="image/Hasaki_Logo.jpg" style="max-width: 100%; max-height: 200px; border-radius: 10px;">
    #     </div>
    # ''', unsafe_allow_html=True)
    
    st.sidebar.markdown("### üìà Data Science", unsafe_allow_html=True)
    st.sidebar.markdown("""
    **C√°c th√†nh vi√™n:**
    - L√™ Qu·ª≥nh Minh Dung
    - Nguy·ªÖn Th√πy Trang
    
    **Gi√°o vi√™n h∆∞·ªõng d·∫´n:** Khu·∫•t Th√πy Ph∆∞∆°ng
    
    **Th·ªùi gian:** 12/2024
    """)
    
    # Main menu with improved styling
    # menu = ["Business Objective", "Build Project", "Product Analysis", "New Prediction"]
    menu = ["M·ª•c Ti√™u D·ª± √Ån", "X√¢y D·ª±ng D·ª± √Ån", "Ph√¢n T√≠ch S·∫£n Ph·∫©m", "Ph√¢n T√≠ch D·ªØ Li·ªáu M·ªõi"]
    choice = st.sidebar.radio("ƒê·ªÅ m·ª•c", menu)
    
    # Existing menu logic remains the same
    if choice == 'M·ª•c Ti√™u D·ª± √Ån':
        col1, col2, col3 = st.columns([1,2,1])
        with col2:  
            st.markdown('''<div class="stContainer">
                        <h2 style="color: #2f6e51; font-size: 1.75em; ">üå± M·ª•c Ti√™u D·ª± √Ån</h2>
                        </div>
                        ''', unsafe_allow_html=True)
            # st.write("### üå± Business Objectives")
            st.write("""
            HASAKI.VN l√† m·ªôt nh√† b√°n l·∫ª uy t√≠n chuy√™n cung c·∫•p c√°c s·∫£n ph·∫©m m·ªπ ph·∫©m ch√≠nh h√£ng v√† d·ªãch v·ª• chƒÉm s√≥c s·∫Øc ƒë·∫πp chuy√™n nghi·ªáp v·ªõi c√°c c·ª≠a h√†ng tr√™n to√†n qu·ªëc.  
            
            ·ª®ng d·ª•ng c·ªßa ch√∫ng t√¥i s·ª≠ d·ª•ng **ph√¢n t√≠ch t√¨nh c·∫£m (sentiment)** ƒë·ªÉ gi√∫p HASAKI hi·ªÉu r√µ h∆°n v·ªÅ ph·∫£n h·ªìi c·ªßa kh√°ch h√†ng, t·ª´ ƒë√≥ c·∫£i thi·ªán ch·∫•t l∆∞·ª£ng s·∫£n ph·∫©m, n√¢ng cao s·ª± h√†i l√≤ng c·ªßa kh√°ch h√†ng v√† c·ªßng c·ªë h√¨nh ·∫£nh th∆∞∆°ng hi·ªáu.  
            """)
            
            st.image("image/Hasaki_Long.jpg")
            
            st.write("""
            ##### üéØ M·ª•c Ti√™u Ch√≠nh:
            - **Hi·ªÉu r√µ t√¨nh c·∫£m c·ªßa kh√°ch h√†ng**: Ph√¢n t√≠ch c√°c ƒë√°nh gi√° v√† x·∫øp h·∫°ng sao ƒë·ªÉ nh·∫≠n di·ªán c√°c ph·∫£n h·ªìi t√≠ch c·ª±c, ti√™u c·ª±c v√† mang t√≠nh x√¢y d·ª±ng.  
            - **C·∫£i thi·ªán ch·∫•t l∆∞·ª£ng s·∫£n ph·∫©m v√† d·ªãch v·ª•**: S·ª≠ d·ª•ng nh·ªØng th√¥ng tin thu ƒë∆∞·ª£c ƒë·ªÉ c·∫£i thi·ªán c√°c s·∫£n ph·∫©m v√† d·ªãch v·ª•.  
            - **TƒÉng c∆∞·ªùng s·ª± h√†i l√≤ng v√† trung th√†nh c·ªßa kh√°ch h√†ng**: Gi·∫£i quy·∫øt c√°c m·ªëi quan t√¢m c·ªßa kh√°ch h√†ng ƒë·ªÉ x√¢y d·ª±ng ni·ªÅm tin.  
            """)  
            
            # st.image("image/sentiment.png", caption="Sentiment Analysis for Customer Reviews")
            st.image("image/sentiment.png")
            # st.markdown('</div>', unsafe_allow_html=True)

    elif choice == 'X√¢y D·ª±ng D·ª± √Ån':
        col1, col2, col3 = st.columns([1,2,1])
        with col2:  
            st.markdown('''<div class="stContainer">
                        <h2 style="color: #2f6e51; font-size: 1.75em; ">üî® X√¢y D·ª±ng D·ª± √Ån</h2>
                        </div>
                        ''', unsafe_allow_html=True)
            # st.write("### Build Project")

            show_project_info(final_data)
        
    elif choice == 'Ph√¢n T√≠ch S·∫£n Ph·∫©m':
        col1, col2, col3 = st.columns([1,2,1])
        with col2:  
            st.markdown('''<div class="stContainer">
                        <h2 style="color: #2f6e51; font-size: 1.75em; ">üìä Ph√¢n T√≠ch S·∫£n Ph·∫©m</h2>
                        </div>
                        ''', unsafe_allow_html=True)
            # T·∫°o giao di·ªán Streamlit
            # st.write("### Ph√¢n T√≠ch S·∫£n Ph·∫©m")

            # Ch·ªçn s·∫£n ph·∫©m t·ª´ dropdown
            ten_san_pham = st.selectbox("Ch·ªçn t√™n s·∫£n ph·∫©m:", final_data['ten_san_pham'].unique())
            ma_san_pham = final_data[final_data["ten_san_pham"] == ten_san_pham]["ma_san_pham"].iloc[0]

            # Ph√¢n t√≠ch v√† hi·ªÉn th·ªã k·∫øt qu·∫£
            if st.button("Ph√¢n T√≠ch"):
                ket_qua = phan_tich_san_pham(final_data, ma_san_pham)
                if "error" in ket_qua:
                    st.error(ket_qua["error"])
                else:
                    hien_thi_ket_qua(ket_qua)


    elif choice == 'Ph√¢n T√≠ch D·ªØ Li·ªáu M·ªõi':
        col1, col2, col3 = st.columns([1,2,1])
        with col2:  
            st.markdown('''<div class="stContainer">
                        <h2 style="color: #2f6e51; font-size: 1.75em; ">üìã Ph√¢n T√≠ch D·ªØ Li·ªáu M·ªõi</h2>
                        </div>
                        ''', unsafe_allow_html=True)
            # Main content area
            st.write("### Nh·∫≠p d·ªØ li·ªáu m·ªõi")
            input_type = st.radio("Ch·ªçn ph∆∞∆°ng th·ª©c nh·∫≠p:", options=("T·∫£i l√™n (Upload)", "Nh·∫≠p v√†o (Input)"))
            
            # X·ª≠ l√Ω d·ªØ li·ªáu v√† d·ª± ƒëo√°n
            processed_data = None
            
            if input_type == "T·∫£i l√™n (Upload)":
                # Tr√¨nh t·∫£i file
                uploaded_file = st.file_uploader("Ch·ªçn t·ªáp CSV ho·∫∑c TXT", type=['csv', 'txt'])
                
                if uploaded_file is not None:
                    try:
                        # ƒê·ªçc t·ªáp d·ª±a tr√™n lo·∫°i
                        if uploaded_file.name.endswith('.csv'):
                            # df = pd.read_csv(uploaded_file)
                            # df = pd.read_csv(uploaded_file, header=None, names=['noi_dung_binh_luan'])
                            df = pd.read_csv(uploaded_file, header=None)[0].to_frame(name='noi_dung_binh_luan')
                        else:
                            # V·ªõi t·ªáp txt, gi·∫£ ƒë·ªãnh m·ªói d√≤ng l√† m·ªôt b√¨nh lu·∫≠n
                            df = pd.DataFrame({'noi_dung_binh_luan': uploaded_file.getvalue().decode('utf-8').split('\n')})
                        
                        # Lo·∫°i b·ªè c√°c d√≤ng r·ªóng
                        df = df[df['noi_dung_binh_luan'].notna() & (df['noi_dung_binh_luan'] != '')]
                        
                        st.write("D·ªØ li·ªáu ƒë√£ t·∫£i l√™n:")
                        st.dataframe(df.head())
                    except Exception as e:
                        st.error(f"L·ªói khi ƒë·ªçc t·ªáp: {e}")
                        # return
            
            elif input_type == "Nh·∫≠p v√†o (Input)":
                # Khu v·ª±c nh·∫≠p vƒÉn b·∫£n cho nhi·ªÅu b√¨nh lu·∫≠n
                content = st.text_area("Nh·∫≠p b√¨nh lu·∫≠n (m·ªói b√¨nh lu·∫≠n m·ªôt d√≤ng):")
                
                if content:
                    # T√°ch n·ªôi dung th√†nh c√°c d√≤ng v√† t·∫°o DataFrame
                    df = pd.DataFrame({'noi_dung_binh_luan': content.split('\n')})
                    df = df[df['noi_dung_binh_luan'].notna() & (df['noi_dung_binh_luan'] != '')]
            
            if 'df' in locals() and not df.empty:
                # X·ª≠ l√Ω c√°c b√¨nh lu·∫≠n
                processed_data = df.apply(process_comments, axis=1)
                
                # K·∫øt h·ª£p d·ªØ li·ªáu g·ªëc v√† d·ªØ li·ªáu ƒë√£ x·ª≠ l√Ω
                combined_data = pd.concat([df, processed_data], axis=1)
                
                # Chu·∫©n b·ªã d·ªØ li·ªáu cho d·ª± ƒëo√°n
                # S·ª≠ d·ª•ng c·ªôt 'comment', negative_count v√† positive_count ƒë√£ ƒë∆∞·ª£c ti·ªÅn x·ª≠ l√Ω
                X_pred_data = combined_data[['comment', 'negative_count', 'positive_count']]
                
                # D·ª± ƒëo√°n c·∫£m x√∫c s·ª≠ d·ª•ng to√†n b·ªô pipeline
                y_pred = sentiment_model.predict(X_pred_data)
                
                # Th√™m k·∫øt qu·∫£ c·∫£m x√∫c v√†o DataFrame
                combined_data['sentiment'] = [sentiment_map[pred] for pred in y_pred]
                
                # Hi·ªÉn th·ªã k·∫øt qu·∫£
                st.markdown("### K·∫øt qu·∫£ Ph√¢n t√≠ch C·∫£m x√∫c")
                st.dataframe(combined_data[['noi_dung_binh_luan', 'sentiment']])

                sentiment_counts = combined_data['sentiment'].value_counts()

                # S·∫Øp x·∫øp sentiment_labels v√† sentiment_values theo th·ª© t·ª± gi·∫£m d·∫ßn c·ªßa gi√° tr·ªã
                sorted_data = sorted(zip(sentiment_counts.values, sentiment_counts.index), reverse=True)
                sorted_values, sorted_labels = zip(*sorted_data)

                # V·∫Ω bi·ªÉu ƒë·ªì d·∫°ng c·ªôt d·ªçc v·ªõi Matplotlib
                fig, ax = plt.subplots(figsize=(8, 5))  # ƒêi·ªÅu ch·ªânh k√≠ch th∆∞·ªõc bi·ªÉu ƒë·ªì
                ax.bar(sorted_labels, sorted_values, color='skyblue')
                ax.set_title('Th·ªëng K√™ S·ªë L∆∞·ª£ng Sentiment', fontsize=10)
                ax.set_xlabel('Sentiment', fontsize=8)
                ax.set_ylabel('S·ªë L∆∞·ª£ng', fontsize=8)

                # Hi·ªÉn th·ªã gi√° tr·ªã tr√™n ƒë·∫ßu c√°c c·ªôt
                for i, v in enumerate(sorted_values):
                    ax.text(i, v + 0.05, f'{v}', ha='center', fontsize=6)

                # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì trong Streamlit
                st.write("**Ph√¢n ph·ªëi Sentiment:**") 
                st.pyplot(fig) 

                st.write("**L∆∞u k·∫øt qu·∫£:**") 
                # Hi·ªÉn th·ªã t√πy ch·ªçn t·∫£i d·ªØ li·ªáu
                csv_data = to_csv(combined_data[['noi_dung_binh_luan', 'sentiment']])
                st.download_button(
                    label="T·∫£i v·ªÅ CSV",
                    data=csv_data,
                    file_name="sentiment_results.csv",
                    mime="text/csv"
                )

if __name__ == '__main__':
    main()